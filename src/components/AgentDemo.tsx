import { useState } from "react";
import { MessageSquare, Send, Bot, User, Brain, Search, FileText, AlertTriangle, FileCheck, Users, Cog } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'agent';
  agentName?: string;
  timestamp: Date;
}

interface Agent {
  name: string;
  role: string;
  description: string;
  icon: any;
  color: string;
  responses: string[];
  capabilities: string[];
}

const demoAgents: Agent[] = [
  {
    name: "Hugo",
    role: "Orchestrateur principal",
    description: "Je coordonne tous les agents selon votre entreprise",
    icon: Cog,
    color: "primary",
    capabilities: ["Routage intelligent", "Coordination multi-agents", "Gestion de session"],
    responses: [
      "Bonjour ! Je vais analyser votre entreprise et diriger votre demande vers le bon agent sp√©cialis√©.",
      "Avec 25 employ√©s, je vous dirige vers notre agent CoSS pour la gestion de votre comit√© SST.",
      "Pour une entreprise de votre taille, l'agent ALSS sera plus adapt√© √† vos besoins.",
      "Je d√©tecte une question l√©gale. Je transf√®re votre demande √† LexiNorm, notre expert r√©glementaire."
    ]
  },
  {
    name: "DiagSST",
    role: "Diagnostic conformit√©",
    description: "J'√©value votre conformit√© LMRSST",
    icon: Brain,
    color: "secondary",
    capabilities: ["Diagnostic automatis√©", "Analyse de conformit√©", "D√©tection des √©carts"],
    responses: [
      "Je vais analyser votre conformit√© LMRSST. Combien d'employ√©s compte votre entreprise ?",
      "Parfait ! Pour une PME manufacturi√®re, je dois v√©rifier 23 obligations principales.",
      "Je d√©tecte l'absence d'un programme de pr√©vention. C'est une non-conformit√© critique !",
      "Votre diagnostic r√©v√®le 78% de conformit√© avec 4 actions critiques √† prioriser."
    ]
  },
  {
    name: "LexiNorm",
    role: "R√©f√©rentiel l√©gal",
    description: "Je fournis les interpr√©tations l√©gales LMRSST",
    icon: Search,
    color: "accent",
    capabilities: ["Recherche l√©gale", "Interpr√©tation articles", "Veille r√©glementaire"],
    responses: [
      "Quelle disposition de la LMRSST souhaitez-vous que je clarifie ?",
      "L'article 78 exige la formation du comit√© SST dans les 60 jours suivant sa constitution.",
      "Un RSS est obligatoire pour les entreprises de 20 employ√©s et plus selon l'article 88.",
      "Voici l'interpr√©tation officielle avec jurisprudence et exemples pratiques."
    ]
  },
  {
    name: "Prioris",
    role: "Plan d'action",
    description: "Je g√©n√®re vos plans d'action personnalis√©s",
    icon: FileText,
    color: "warning",
    capabilities: ["Priorisation intelligente", "Plans sectoriels", "Suivi d'avancement"],
    responses: [
      "Bas√© sur votre diagnostic, je vais cr√©er un plan d'action structur√© par priorit√©.",
      "Action critique #1: Cr√©er le programme de pr√©vention (√©ch√©ance: 30 jours)",
      "J'ai g√©n√©r√© un plan adapt√© √† votre secteur avec 12 actions r√©parties sur 6 mois.",
      "Plan mis √† jour ! 3 actions compl√©t√©es, 5 en cours, √©ch√©ance respect√©e √† 85%."
    ]
  },
  {
    name: "Sentinelle",
    role: "Alertes r√©glementaires",
    description: "Je surveille vos √©ch√©ances et obligations",
    icon: AlertTriangle,
    color: "destructive",
    capabilities: ["Surveillance continue", "Alertes multi-canaux", "Escalade intelligente"],
    responses: [
      "üö® ALERTE: Formation du comit√© SST expire dans 15 jours !",
      "Rappel: Inspection annuelle programm√©e le 15 mars - Checklist envoy√©e.",
      "Notification envoy√©e sur Teams et par email. Voulez-vous programmer un rappel ?",
      "D√©tection d'un incident non d√©clar√©. Proc√©dure d'urgence activ√©e."
    ]
  },
  {
    name: "DocuGen",
    role: "G√©n√©rateur de rapports",
    description: "Je compile vos rapports de conformit√©",
    icon: FileCheck,
    color: "success",
    capabilities: ["Rapports PDF", "Export CNESST", "Documentation l√©gale"],
    responses: [
      "Je g√©n√®re votre rapport de conformit√© complet avec signature num√©rique.",
      "Rapport PDF cr√©√©: 23 pages incluant diagnostic, plan d'action et r√©f√©rences l√©gales.",
      "Export JSON format√© pour soumission CNESST - Validation r√©ussie ‚úì",
      "Rapport bilingue g√©n√©r√© avec annexes techniques et justifications l√©gales."
    ]
  },
  {
    name: "CoSS",
    role: "Comit√© SST virtuel",
    description: "Je simule les d√©cisions de votre comit√© SST",
    icon: Users,
    color: "primary",
    capabilities: ["Vote collectif", "R√©unions virtuelles", "D√©cisions consensuelles"],
    responses: [
      "Convocation du comit√© SST virtuel. 5 membres connect√©s pour validation.",
      "Vote sur le programme de pr√©vention: 4 pour, 1 abstention. ‚úÖ Approuv√© !",
      "Le comit√© recommande l'ajout d'un RSS sp√©cialis√© en ergonomie.",
      "R√©union mensuelle programm√©e. Ordre du jour: suivi des 3 incidents r√©cents."
    ]
  },
  {
    name: "ALSS",
    role: "Agent de liaison SST",
    description: "Je repr√©sente les travailleurs dans les PME",
    icon: User,
    color: "secondary",
    capabilities: ["M√©diation conflits", "Repr√©sentation employ√©s", "Escalade CNESST"],
    responses: [
      "Un employ√© m'a contact√© concernant un risque. Je traite sa demande confidentiellement.",
      "Recommandation transmise √† l'employeur: am√©liorer l'√©clairage au poste de soudure.",
      "M√©diation en cours pour r√©soudre le diff√©rend sur les EPI obligatoires.",
      "Escalade vers CNESST initi√©e. Dossier pr√©par√© avec preuves et t√©moignages."
    ]
  }
];

const AgentDemo = () => {
  const [selectedAgent, setSelectedAgent] = useState<Agent>(demoAgents[0]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Simulation de r√©ponse d'agent
    setTimeout(() => {
      const randomResponse = selectedAgent.responses[Math.floor(Math.random() * selectedAgent.responses.length)];
      const agentMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: randomResponse,
        sender: 'agent',
        agentName: selectedAgent.name,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, agentMessage]);
      setIsTyping(false);
    }, 1500 + Math.random() * 2000);
  };

  const startDemo = (demoType: string) => {
    const demoMessages: Record<string, Message[]> = {
      diagnostic: [
        {
          id: '1',
          content: "Je voudrais faire un diagnostic de conformit√© pour mon entreprise",
          sender: 'user',
          timestamp: new Date()
        },
        {
          id: '2',
          content: "Parfait ! DiagSST va s'occuper de votre √©valuation. Je vais analyser votre conformit√© LMRSST. Combien d'employ√©s compte votre entreprise ?",
          sender: 'agent',
          agentName: 'Hugo',
          timestamp: new Date()
        }
      ],
      legal: [
        {
          id: '1',
          content: "Quelles sont les obligations pour former un comit√© SST ?",
          sender: 'user',
          timestamp: new Date()
        },
        {
          id: '2',
          content: "LexiNorm peut vous aider ! L'article 78 de la LMRSST exige la formation du comit√© SST dans les 60 jours suivant sa constitution. Voici les d√©tails...",
          sender: 'agent',
          agentName: 'Hugo',
          timestamp: new Date()
        }
      ],
      alert: [
        {
          id: '1',
          content: "J'ai re√ßu une alerte sur mon tableau de bord",
          sender: 'user',
          timestamp: new Date()
        },
        {
          id: '2',
          content: "üö® Sentinelle a d√©tect√©: Formation du comit√© SST expire dans 15 jours ! Voulez-vous que je programme les actions correctives ?",
          sender: 'agent',
          agentName: 'Hugo',
          timestamp: new Date()
        }
      ]
    };

    setMessages(demoMessages[demoType] || []);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Mode D√©mo - Agents AgenticSST</h2>
          <p className="text-muted-foreground">
            Testez les interactions avec nos agents intelligents sans backend
          </p>
        </div>
        <Badge variant="outline" className="text-xs">
          Simulation Interactive
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* S√©lection d'agent */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Agents Disponibles</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            {demoAgents.map((agent) => {
              const IconComponent = agent.icon;
              const isSelected = selectedAgent.name === agent.name;
              
              return (
                <Button
                  key={agent.name}
                  variant={isSelected ? "default" : "ghost"}
                  className="w-full justify-start h-auto p-3"
                  onClick={() => setSelectedAgent(agent)}
                >
                  <div className="flex items-center gap-3">
                    <IconComponent className="h-5 w-5" />
                    <div className="text-left">
                      <div className="font-medium text-sm">{agent.name}</div>
                      <div className="text-xs text-muted-foreground">{agent.role}</div>
                    </div>
                  </div>
                </Button>
              );
            })}
          </CardContent>
        </Card>

        {/* Interface de chat */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex items-center gap-3">
              <Avatar>
                <AvatarFallback>
                  <selectedAgent.icon className="h-5 w-5" />
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="text-lg">{selectedAgent.name}</CardTitle>
                <p className="text-sm text-muted-foreground">{selectedAgent.description}</p>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Boutons de d√©mo rapide */}
            <div className="flex flex-wrap gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => startDemo('diagnostic')}
              >
                D√©mo Diagnostic
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => startDemo('legal')}
              >
                D√©mo L√©gal
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => startDemo('alert')}
              >
                D√©mo Alerte
              </Button>
            </div>

            {/* Zone de chat */}
            <Card className="bg-muted/10">
              <ScrollArea className="h-80 p-4">
                <div className="space-y-4">
                  {messages.length === 0 && (
                    <div className="text-center text-muted-foreground py-8">
                      <MessageSquare className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p>Commencez une conversation ou utilisez une d√©mo</p>
                    </div>
                  )}
                  
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${
                        message.sender === 'user' ? 'justify-end' : 'justify-start'
                      }`}
                    >
                      {message.sender === 'agent' && (
                        <Avatar className="h-8 w-8">
                          <AvatarFallback className="bg-primary text-primary-foreground">
                            <Bot className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>
                      )}
                      <div
                        className={`max-w-xs px-3 py-2 rounded-lg ${
                          message.sender === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-background border'
                        }`}
                      >
                        {message.sender === 'agent' && message.agentName && (
                          <div className="text-xs text-muted-foreground mb-1">
                            {message.agentName}
                          </div>
                        )}
                        <p className="text-sm">{message.content}</p>
                      </div>
                      {message.sender === 'user' && (
                        <Avatar className="h-8 w-8">
                          <AvatarFallback className="bg-secondary">
                            <User className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>
                      )}
                    </div>
                  ))}

                  {isTyping && (
                    <div className="flex gap-3">
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="bg-primary text-primary-foreground">
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-background border px-3 py-2 rounded-lg">
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce [animation-delay:0.1s]"></div>
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce [animation-delay:0.2s]"></div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>
            </Card>

            {/* Zone de saisie */}
            <div className="flex gap-2">
              <Input
                placeholder="Tapez votre message..."
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                disabled={isTyping}
              />
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isTyping}
                size="icon"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>

            {/* Capacit√©s de l'agent */}
            <div>
              <h4 className="font-medium mb-2">Capacit√©s de {selectedAgent.name}</h4>
              <div className="flex flex-wrap gap-1">
                {selectedAgent.capabilities.map((capability, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {capability}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AgentDemo;